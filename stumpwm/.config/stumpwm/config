; -*-lisp-*-
; vim:fileencoding=utf-8:filetype=lisp
;;;; Configuration file for the Stump Window Manager.
;;;;
;;;; for more information, read the fantastic manual on
;;;; - https://stumpwm.github.io/documentation.html

;; use the `stumpwm` package prefix by default - a bad habit just to save a few keystrokes
(in-package :stumpwm)

;;; 1 CONTRIB MODULES
;; more on the available contrib modules on
;; - https://github.com/stumpwm/stumpwm/wiki/Modules#contrib-repository
;; - https://github.com/stumpwm/stumpwm-contrib

;; cpu information on the mode-line
(load-module "cpu")

;; turn groups/workspaces into a 3d coordinate system
(load-module "spatial-groups")

;;; 2 UTILITIES
(defcommand toggle-status-bar () ()
  "Toggle the mode line/status bar"
  (toggle-mode-line (current-screen) (current-head)))

(defun mute-p ()
  "Return T if the default sink is mute. NIL otherwise"
  (string= (uiop:run-program (list "pactl" "get-sink-mute" "@DEFAULT_SINK@")
                             :output '(:string :stripped t))
           "Mute: yes"))

(defun get-left-and-right-volumes ()
  "Return the volumes of the left and right channels from the default sink"
  (let* ((output (uiop:run-program (list "pactl" "get-sink-volume" "@DEFAULT_SINK@")
                                   :output :string))
         (channels (nth-value 1 (cl-ppcre:scan-to-strings "((\\d+%)+)" output))))
    (list (svref channels 0) (svref channels 1))))

(defun display-volume-info ()
  "Print the current volume and mute status"
  (let ((*record-last-msg-override* t))
    (destructuring-bind (volume-left volume-right) (get-left-and-right-volumes)
      (message "~:[~;(MUTE) ~]Volume: ~a, ~a" (mute-p) volume-left volume-right))))

(defcommand change-volume (value) ((:string "change volume by: "))
  "Control the volume through `pactl`"
  (uiop:run-program (list "pactl" "set-sink-volume" "@DEFAULT_SINK@" value))
  (display-volume-info))

(defcommand toggle-mute () ()
            "Toggle mute on/off"
            (uiop:run-program (list "pactl" "set-sink-mute" "@DEFAULT_SINK@" "toggle"))
            (display-volume-info))

(defun display-brightness-message ()
  "Get the integer part of the brightness value"
  (let ((*record-last-msg-override* t))
    (message "Brightness: ~a~%"
             (floor (read-from-string
                     (uiop:run-program (list "xbacklight" "-get")
                                       :output '(:string :stripped t)))))))

(defcommand brightness- () ()
  "Decrease the monitor's brightness by 10%"
  (uiop:run-program (list "xbacklight" "-dec" "10"))
  (display-brightness-message))

(defcommand brightness+ () ()
  "Increase the monitor's brightness by 10%"
  (uiop:run-program (list "xbacklight" "-inc" "10"))
  (display-brightness-message))

(defcommand prompt-poweroff () ()
  "Prompt the user to confirm powering off"
  (if (y-or-n-p "Power off? ")
      (uiop:launch-program "systemctl poweroff")
      (xlib:unmap-window (screen-message-window (current-screen)))))

(defcommand prompt-reboot () ()
  "Prompt the user to confirm rebooting"
  (if (y-or-n-p "Reboot? ")
      (uiop:launch-program "systemctl reboot")
      (xlib:unmap-window (screen-message-window (current-screen)))))

(defcommand prompt-lockscreen () ()
  "Prompt the user to confirm locking the screen"
  (if (y-or-n-p "Lock screen? ")
      (uiop:launch-program (list "xscreensaver-command" "--lock"))
      (xlib:unmap-window (screen-message-window (current-screen)))))

(defcommand clear-selections () ()
  "Clear primary, secondary, and clipboard selections"
  (uiop:launch-program (list ",clipcl"))
  (message "Cleared primary, secondary, and clipboard selections"))

(defcommand change-window-number (num) ((:number "Number: "))
  "Change the number of the current window

  Wrap both `REPACK-WINDOW-NUMBERS` and `RENUMBER` into a single command: If NUM is NIL,
  repack the all window numbers from the current group. Otherwise, set the number of the
  current window to this number. If another window is using the number, then the windows
  will swap numbers."
  (unless (null num)
    (if (>= num 0)
        (renumber num)
        (repack-window-numbers))))

(defun set-background-color (color)
  (uiop:run-program (list "hsetroot" "-solid" color)))

(defun set-background-image (path)
  (if (probe-file path)
      (uiop:run-program (list "hsetroot" "-cover" (uiop:native-namestring path)))
      (set-background-color (nth 0 *colors*))))

;;; 3 VISUAL AND COLOURS
(setf *colors* (list
                "#170420"               ;  0 black   (background)
                "#b5bd68"               ;  1 green
                "#f0c674"               ;  2 yellow
                "#81a2be"               ;  3 blue
                "#ea1646"               ;  4 magenta (purple)
                "#8abeb7"               ;  5 cyan    (aqua)
                "#c5c8c6"               ;  6 white   (foreground)

                "#969896"               ;  7 gray    (comment)
                "#282a2e"               ;  8 (current line)
                "#373b41"               ;  9 (selection)
                "#de935f"               ; 10 (orange)
                ))

(set-fg-color (nth 6 *colors*))             ; message/input bar foreground color
(set-bg-color (nth 0 *colors*))             ; message/input bar background color
(set-border-color (nth 6 *colors*))         ; message/input bar border color
(set-focus-color (nth 4 *colors*))          ; focused window border color
(set-unfocus-color (nth 1 *colors*))        ; unfocused windows border color
(set-float-focus-color (nth 4 *colors*))    ; focused floating window border color
(set-float-unfocus-color (nth 1 *colors*))  ; unfocused floating window border color
(set-win-bg-color (nth 0 *colors*))

(dolist (screen *screen-list*)
  (update-color-map screen))

(set-background-image "~/.config/wallpaper")

(setf *normal-border-width* 1)
(setf *transient-border-width* 1)
(setf *window-border-style* :tight)
(setf *maxsize-border-width* 1)

;; enable which-key (display available keybindings)
(add-hook *key-press-hook* 'which-key-mode-key-press-hook)

;; use `xfontsel` to query available fonts
(or (set-font "-*-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*")
    (set-font "9x15bold"))

;;; 5 MODE-LINE
;; the windows module
;; check available segments in stumpwm's `primitives.lisp`
(setf *window-format* "%m%n%s%c")

;; the datetime module
;;   <day-of-week-abbr>, <DD> <month-name> <YYYY> - <HH>:<MM>
(setf *time-modeline-string* "%a, %d %B %Y - %R")

;; setting the modules to display
;;   %n     current group module (configured with `stumpwm::*group-format*`)
;;   %W     windows module for the current group (configured with `stumpwm::*window-format*`)
;;   %^>    justify right the rest of the string
;;   %C     CPU module (requires the `cpu` contrib module configured with `cpu::*cpu-modeline-fmt*`)
;;   %d     datetime module (configured with `stumpwm::*time-modeline-string*`)
(setf *screen-mode-line-format* (list "[%n]" "%W" "^>" "%C" " | " "%d"))

;; colours
(setf *mode-line-background-color* (nth 0 *colors*))
(setf *mode-line-foreground-color* (nth 4 *colors*))
(setf *mode-line-border-color* (nth 4 *colors*))
(setf *mode-line-border-width* 0)
(setf *mode-line-position* :bottom)

;; the number of seconds between updates
(setf *mode-line-timeout* 10)

;; enable mode-line AFTER configuring it
(enable-mode-line (current-screen) (current-head) t)

;;; 6 KEY BINDINGS
;; modifiers: control (C-), alt (A-), meta (M-), super (s-), shift (S-), and hyper (H-)
;; use Ctrl+Space as the prefix
(set-prefix-key (kbd "C-SPC"))

;; change focus on mouse click
(setf *mouse-focus-policy* :click)

;; toggle mode-line/status bar
(define-key *root-map* (kbd "t") "toggle-status-bar")

;; change window numbering
(define-key *root-map* (kbd "DEL") "change-window-number")
(define-key *root-map* (kbd "Delete") "change-window-number -1")

;; rearranging default keybindings
;; remove root-leval keybinding for xterm
(undefine-key *root-map* (kbd "C-c"))

;; clear the current frame
(define-key *root-map* (kbd "c") "fclear")

;; move horizontal and vertical splitting
(undefine-key *tile-group-root-map* (kbd "S"))
(define-key *tile-group-root-map* (kbd "/") "hsplit")
(undefine-key *tile-group-root-map* (kbd "s"))
(define-key *tile-group-root-map* (kbd "-") "vsplit")

;; remove emacs keybindings from the root
(undefine-key *root-map* (kbd "e"))
(undefine-key *root-map* (kbd "C-e"))

;; move "close all frames but this one"
(undefine-key *tile-group-root-map* (kbd "Q"))
(define-key *tile-group-root-map* (kbd "O") "only")

;; disable unused window and frame cycling
(undefine-key *group-root-map* (kbd "o"))       ;; cycle group's window
(undefine-key *tile-group-root-map* (kbd "o"))  ;; cycle window's frames

;; disable repeated window selection
(undefine-key *group-root-map* (kbd "C-Return"))

;; running commands
;; defining a user commands keymap
(defvar *programs-map* (make-sparse-keymap))
(define-key *programs-map* (kbd "b") "exec torbrowser-launcher")
(define-key *programs-map* (kbd "B") "exec qutebrowser")
(define-key *programs-map* (kbd "c") "exec chromium")
(define-key *programs-map* (kbd "e") "exec emacs")
(define-key *programs-map* (kbd "i") "exec ,irc")
(define-key *programs-map* (kbd "k") "exec keepassxc")
(define-key *programs-map* (kbd "m") "exec ,dmenu_run_xres")
(define-key *programs-map* (kbd "n") "exec xournalpp")
(define-key *programs-map* (kbd "p") "exec st -e python")
(define-key *programs-map* (kbd "P") "exec st -e bpython")
(define-key *programs-map* (kbd "t") "exec st")
(define-key *programs-map* (kbd "T") "exec alacritty")
(define-key *programs-map* (kbd "C-t") "exec 9term rc")
(define-key *programs-map* (kbd "z") "exec zeal")
(define-key *programs-map* (kbd "C-g") "abort")
(define-key *programs-map* (kbd "ESC") "abort")

;; placing the commands keymap under the root's "d" key
(define-key *root-map* (kbd "d") '*programs-map*)

;; defining a system/wm management commands keymap
(defvar *system-map* (make-sparse-keymap))
(define-key *root-map* (kbd "C-d") '*system-map*)
(define-key *system-map* (kbd "l") "prompt-lockscreen")
(define-key *system-map* (kbd "p") "prompt-poweroff")
(define-key *system-map* (kbd "r") "prompt-reboot")
(define-key *system-map* (kbd "C-r") "loadrc")
(define-key *system-map* (kbd "s") "clear-selections")
(define-key *system-map* (kbd "C-g") "abort")
(define-key *system-map* (kbd "ESC") "abort")

;; volume controls
(define-key *top-map* (kbd "XF86AudioLowerVolume") "change-volume -5%")
(define-key *top-map* (kbd "S-XF86AudioLowerVolume") "change-volume -25%")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "change-volume +5%")
(define-key *top-map* (kbd "S-XF86AudioRaiseVolume") "change-volume +25%")
(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")

;; screen brightness controls
(define-key *top-map* (kbd "XF86MonBrightnessDown") "brightness-")
(define-key *top-map* (kbd "XF86MonBrightnessUp") "brightness+")

;; screenshots
(define-key *top-map* (kbd "SunPrint_Screen") "exec flameshot screen -p ~/Pictures/screenshots")
(define-key *top-map* (kbd "Sys_Req") "exec flameshot gui")  ; shift + print-screen

;; navigate windows in a group
(define-key *top-map* (kbd "s-n") "next-in-frame")
(define-key *top-map* (kbd "s-p") "prev-in-frame")
(define-key *top-map* (kbd "M-TAB") "other-window")

;;; 6.1 spatial groups
;; move between groups in the current desktop (x and y axis)
(define-key *groups-map* (kbd "Left") "coord-left")
(define-key *groups-map* (kbd "Down") "coord-down")
(define-key *groups-map* (kbd "Up") "coord-up")
(define-key *groups-map* (kbd "Right") "coord-right")

;; move betwen desktops (z axis)
(define-key *groups-map* (kbd "p") "coord-taskleft")
(define-key *groups-map* (kbd "n") "coord-taskright")

;; jump to the current desktop's origin group (x: 0, y: 0)
(define-key *groups-map* (kbd "c") "coord-taskorigin")

;; jump to the previous group
(define-key *top-map* (kbd "s-TAB") "coord-taskpop")
(define-key *groups-map* (kbd "TAB") "coord-taskpop")

;; kill all windows in the current group
(define-key *groups-map* (kbd "K") "kill-windows-current-group")

;; abort actions in group map
(define-key *groups-map* (kbd "C-g") "abort")
(define-key *groups-map* (kbd "ESC") "abort")
